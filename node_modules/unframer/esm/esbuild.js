var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { logger } from './utils';
import { transform } from 'esbuild';
export const externalPackages = [
    'react',
    'react-dom',
    'framer',
    'unframer',
    'framer-motion', //
];
let redirectCache = new Map();
export function esbuildPluginBundleDependencies({ signal = undefined, externalizeNpm = false, }) {
    const codeCache = new Map();
    const plugin = {
        name: 'esbuild-plugin',
        setup(build) {
            const namespace = 'https ';
            build.onResolve({ filter: /^https?:\/\// }, (args) => {
                const url = new URL(args.path);
                return {
                    path: args.path,
                    external: false,
                    // sideEffects: false,
                    namespace,
                };
            });
            const resolveDep = (args) => {
                if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                    throw new Error('aborted');
                }
                if (args.path.startsWith('https://')) {
                    return {
                        path: args.path,
                        external: false,
                        // sideEffects: false,
                        namespace,
                    };
                }
                if (args.path === 'framer') {
                    return {
                        path: 'unframer',
                        external: true,
                    };
                }
                if ('framer-motion' === args.path) {
                    return {
                        path: 'unframer',
                        external: true,
                    };
                }
                if (externalPackages.some((x) => x === args.path || args.path.startsWith(x + '/'))) {
                    return {
                        path: args.path,
                        external: true,
                    };
                }
                // console.log('resolve', args.path)
                if (args.path.startsWith('.') || args.path.startsWith('/')) {
                    const u = new URL(args.path, args.importer).toString();
                    // logger.log('resolve', u)
                    return {
                        path: u,
                        namespace,
                    };
                }
                if (externalizeNpm) {
                    return {
                        path: args.path,
                        external: true,
                    };
                }
                const url = `https://esm.sh/${args.path}`;
                return {
                    path: url,
                    namespace,
                    external: false,
                };
            };
            // build.onResolve({ filter: /^\w/ }, resolveDep)
            build.onResolve({ filter: /.*/, namespace }, resolveDep);
            build.onLoad({ filter: /.*/, namespace }, (args) => __awaiter(this, void 0, void 0, function* () {
                if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                    throw new Error('aborted');
                }
                const url = args.path;
                const u = new URL(url);
                const resolved = yield resolveRedirect({
                    url,
                    redirectCache,
                    signal,
                });
                if (codeCache.has(url)) {
                    const code = yield codeCache.get(url);
                    return {
                        contents: code,
                        loader: 'js',
                    };
                }
                let loader = 'jsx';
                const promise = Promise.resolve().then(() => __awaiter(this, void 0, void 0, function* () {
                    var _a;
                    logger.log('fetching', url.replace(/https?:\/\//, ''));
                    const res = yield fetchWithRetry(resolved, { signal });
                    if (!res.ok) {
                        throw new Error(`Cannot fetch ${resolved}: ${res.status} ${res.statusText}`);
                    }
                    // console.log('type', res.headers.get('content-type'))
                    if ((_a = res.headers
                        .get('content-type')) === null || _a === void 0 ? void 0 : _a.startsWith('application/json')) {
                        loader = 'json';
                        return yield res.text();
                    }
                    let text = yield res.text();
                    // when it finds a line with /* webpackIgnore: true */
                    // it also adds /* @vite-ignore */
                    text = text.replace(/(\/\* webpackIgnore: true \*\/)/g, '$1 /* @vite-ignore */');
                    const transformed = yield transform(text, {
                        define: {
                            'import.meta.url': JSON.stringify(resolved),
                        },
                        minify: false,
                        format: 'esm',
                        jsx: 'transform',
                        logLevel: 'error',
                        loader,
                        platform: 'browser',
                    });
                    // console.log('transformed', resolved)
                    return transformed.code;
                }));
                if (loader === 'jsx') {
                    codeCache.set(url, promise);
                }
                const code = yield promise;
                return {
                    contents: code,
                    loader,
                };
            }));
        },
    };
    return plugin;
}
export function resolveRedirect(_a) {
    return __awaiter(this, arguments, void 0, function* ({ redirectCache, signal, url, }) {
        if (!url) {
            return '';
        }
        url = url.toString();
        if (redirectCache && redirectCache.has(url)) {
            return yield redirectCache.get(url);
        }
        // console.time(`resolveRedirect ${url}`)
        const p = recursiveResolveRedirect(url, signal);
        // console.timeEnd(`resolveRedirect ${url}`)
        if (redirectCache) {
            redirectCache.set(url, p);
        }
        return yield p;
    });
}
export function recursiveResolveRedirect(url, signal) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!url) {
            return;
        }
        let res = yield fetchWithRetry(url, {
            redirect: 'manual',
            method: 'HEAD',
            signal: signal,
        });
        const loc = res.headers.get('location');
        if (res.status < 400 && res.status >= 300 && loc) {
            // logger.log('redirect', loc)
            return recursiveResolveRedirect(res.headers.get('location') || '');
        }
        return url;
    });
}
export const fetchWithRetry = retryTwice(fetch);
export function retryTwice(fn) {
    return (...args) => __awaiter(this, void 0, void 0, function* () {
        try {
            return yield fn(...args);
        }
        catch (e) {
            // ignore abort errors
            if (e.name === 'AbortError') {
                return;
            }
            logger.error('retrying', e.message);
            return yield fn(...args);
        }
    });
}
//# sourceMappingURL=esbuild.js.map