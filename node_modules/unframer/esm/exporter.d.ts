import { PropertyControls } from './framer';
import { ComponentFontBundle } from './css.js';
export declare function bundle({ cwd: out, watch, components, breakpoints, signal, }: {
    cwd?: string | undefined;
    watch?: boolean | undefined;
    components?: Record<string, string> | undefined;
    breakpoints?: {
        readonly base: 0;
        readonly sm: 320;
        readonly md: 768;
        readonly lg: 960;
        readonly xl: 1200;
        readonly '2xl': 1536;
    } | undefined;
    signal?: AbortSignal | undefined;
}): Promise<void>;
export declare function findRelativeLinks(text: string): number[];
export declare function extractPropControlsSafe(text: any, name: any): Promise<PropertyControls<any, any> | undefined>;
export declare function extractPropControlsUnsafe(filename: any, name: any): Promise<{
    propertyControls?: PropertyControls;
    fonts?: ComponentFontBundle[];
}>;
export declare function propControlsToType(controls: PropertyControls, fileName: any): string;
export declare function parsePropertyControls(code: string): string | null;
type TokenInfo = {
    tokenName: string;
    metadata?: Record<string, any>;
    defaultValue: string;
};
export declare function extractTokenInfo(code: string): TokenInfo[];
export declare function componentCamelCase(str: string): string;
export {};
//# sourceMappingURL=exporter.d.ts.map